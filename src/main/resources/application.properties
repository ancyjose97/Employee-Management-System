
spring.datasource.url=jdbc:mysql://localhost:3306/employee_mgmt
spring.datasource.username:root
spring.datasource.password=mypassword

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

spring.jpa.hibernate.ddl-auto=update

spring.jpa.properties.hibernate.show_sql=true


spring.jpa.properties.hibernate.format_sql=true


 spring.profiles.active=docker
 
 

#SPRING BOOT ACTUATOR 

# It is used to enable the production ready features in the spring application.
# For eg: Monitoring the application

# STEPS
# Add actuator dependency
# Add the following configuration in this file to expose or enable all the HTTP endpoints of actuator

management.endpoints.web.exposure.include=*

# /info endpoint will give all the informations added about the application in application.properties
#http://localhost:8080/actuator/info

management.info.env.enabled=true

info.app.name=Spring Boot Restful Web Services
info.app.description=Spring Boot Restful Web Services Demo
info.app.version=1.0.0

#health endpoint shows the health of the application such as status, disk space, database and more
management.endpoint.health.show-details=always

# /shutdown endpoint can be used to gracefully shut down the application.
# this endpoint is not enabled by default. you can enable this endpoint by adding this property in application.properties file.

Management.endpoint.shutdown.enabled=true
#After adding the above property, send this post request in postman (http://localhost:8080/actuator/shutdown). Now the application will be shut down.


#beans endpoint shows all the beans registered in your application including the beans you explicitly configured and those auto configured by spring boot

#conditions endpoint shows the auto configuration report categorised into positive matches and negative matches

#mappings endpoint shows all the @RequestMapping paths declared in the application.
#This is very helpful for checking which request path will be handled by which controller method.

# /configprops endpoint offers all the configuration properties defined by @ConfigurationProperties bean, including your configuration properties 
#defined in the application.properties or YAML files.


# /metrics endpoint shows various metrics about the current application such as how much memory it is using, how much memory is free, the size of the heap used,
# the number of threads used, and so on.


# /env endpoint exposes all the properties from the Spring's ConfigurableEnvironment interface, 
# such as list of active profiles, application properties, system environment variables and so on.

# /threaddump endpoint allows to view application's thread dump with running threads details and JVM stack trace.

# /loggers endpoint allows to view and configure the log levels of your application at runtime.

# WE CAN ALSO CHANGE THE LOG LEVEL OF PACKAGE
# Select a package name, go to postman and send a post request, the log level changed can be noted in /loggers URL.

# eg: IN POSTMAN, post request => http://localhost:8080/actuator/loggers/com.cts

# {
 #   "configuredLevel":"INFO"
# }

# Now the log level would have been changed with postman status as 204 No Content